/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import BN from "bn.js";

export interface AccessModuleContract
  extends Truffle.Contract<AccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccessModuleInstance>;
}

export interface AccountsModuleContract
  extends Truffle.Contract<AccountsModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AccountsModuleInstance>;
}

export interface BaseContract extends Truffle.Contract<BaseInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BaseInstance>;
}

export interface ContextContract extends Truffle.Contract<ContextInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContextInstance>;
}

export interface CoreInterfaceContract
  extends Truffle.Contract<CoreInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CoreInterfaceInstance>;
}

export interface DCAModuleContract extends Truffle.Contract<DCAModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DCAModuleInstance>;
}

export interface DCAOperatorRoleContract
  extends Truffle.Contract<DCAOperatorRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DCAOperatorRoleInstance>;
}

export interface ERC165Contract extends Truffle.Contract<ERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC165Instance>;
}

export interface ERC721Contract extends Truffle.Contract<ERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721Instance>;
}

export interface ERC721BurnableContract
  extends Truffle.Contract<ERC721BurnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721BurnableInstance>;
}

export interface ERC721EnumerableContract
  extends Truffle.Contract<ERC721EnumerableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721EnumerableInstance>;
}

export interface ERC721FullContract
  extends Truffle.Contract<ERC721FullInstance> {
  "new"(
    name: string,
    symbol: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721FullInstance>;
}

export interface ERC721MetadataContract
  extends Truffle.Contract<ERC721MetadataInstance> {
  "new"(
    name: string,
    symbol: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC721MetadataInstance>;
}

export interface ERC721MintableContract
  extends Truffle.Contract<ERC721MintableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC721MintableInstance>;
}

export interface Fake1InchRouterContract
  extends Truffle.Contract<Fake1InchRouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Fake1InchRouterInstance>;
}

export interface FakeUniswapRouterContract
  extends Truffle.Contract<FakeUniswapRouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FakeUniswapRouterInstance>;
}

export interface FreeERC20Contract extends Truffle.Contract<FreeERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FreeERC20Instance>;
}

export interface GLDTokenContract extends Truffle.Contract<GLDTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<GLDTokenInstance>;
}

export interface IAccessModuleContract
  extends Truffle.Contract<IAccessModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAccessModuleInstance>;
}

export interface ICErc20Contract extends Truffle.Contract<ICErc20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICErc20Instance>;
}

export interface IDefiModuleContract
  extends Truffle.Contract<IDefiModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDefiModuleInstance>;
}

export interface IERC165Contract extends Truffle.Contract<IERC165Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC165Instance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IERC721Contract extends Truffle.Contract<IERC721Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721Instance>;
}

export interface IERC721EnumerableContract
  extends Truffle.Contract<IERC721EnumerableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721EnumerableInstance>;
}

export interface IERC721MetadataContract
  extends Truffle.Contract<IERC721MetadataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721MetadataInstance>;
}

export interface IERC721ReceiverContract
  extends Truffle.Contract<IERC721ReceiverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC721ReceiverInstance>;
}

export interface IPTokenContract extends Truffle.Contract<IPTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPTokenInstance>;
}

export interface IRAYNAVCalculatorContract
  extends Truffle.Contract<IRAYNAVCalculatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRAYNAVCalculatorInstance>;
}

export interface IRAYPortfolioManagerContract
  extends Truffle.Contract<IRAYPortfolioManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IRAYPortfolioManagerInstance>;
}

export interface IRAYStorageContract
  extends Truffle.Contract<IRAYStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRAYStorageInstance>;
}

export interface ITestnetCompoundDAIContract
  extends Truffle.Contract<ITestnetCompoundDAIInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ITestnetCompoundDAIInstance>;
}

export interface IUniswapV2Router01Contract
  extends Truffle.Contract<IUniswapV2Router01Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapV2Router01Instance>;
}

export interface IUniswapV2Router02Contract
  extends Truffle.Contract<IUniswapV2Router02Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapV2Router02Instance>;
}

export interface MinterRoleContract
  extends Truffle.Contract<MinterRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MinterRoleInstance>;
}

export interface ModuleContract extends Truffle.Contract<ModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ModuleInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface PausableContract extends Truffle.Contract<PausableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PausableInstance>;
}

export interface PauserRoleContract
  extends Truffle.Contract<PauserRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PauserRoleInstance>;
}

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PoolInstance>;
}

export interface TokenModuleContract
  extends Truffle.Contract<TokenModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenModuleInstance>;
}

export interface VotesModuleContract
  extends Truffle.Contract<VotesModuleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VotesModuleInstance>;
}

export interface WhitelistAdminRoleContract
  extends Truffle.Contract<WhitelistAdminRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistAdminRoleInstance>;
}

export interface WhitelistedRoleContract
  extends Truffle.Contract<WhitelistedRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistedRoleInstance>;
}

export interface AccessModuleInstance extends Truffle.ContractInstance {
  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelisted(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  whitelistEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  enableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  disableWhitelist: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isOperationAllowed(
    operation: number | BN | string,
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface AccountsModuleInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface BaseInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ContextInstance extends Truffle.ContractInstance {}

export interface CoreInterfaceInstance extends Truffle.ContractInstance {
  set: {
    (
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface DCAModuleInstance extends Truffle.ContractInstance {
  addDCAOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  burn: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributionTokens(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  distributions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, BN]>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  globalPeriodBuyAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isDCAOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextBuyTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  periodTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeAfterDistribution(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  renounceDCAOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  router(txDetails?: Truffle.TransactionDetails): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  strategy(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenOfOwnerByIndex(
    owner: string | BN,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenToSell(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAccountBalance(
    tokenId: number | BN | string,
    tokenAddress: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAccountBuyAmount(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAccountNextDistributionIndex(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAccountLastRemovalPointIndex(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDistributionsNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getDistributionTokenAddress(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getDistributionAmount(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDistributionTotalSupply(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenIdByAddress(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setDistributionToken: {
    (
      tokenSymbol: string,
      tokenAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenSymbol: string,
      tokenAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      tokenSymbol: string,
      tokenAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenSymbol: string,
      tokenAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setDeadline: {
    (
      newDeadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newDeadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      newDeadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDeadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BN | string,
      buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      amount: number | BN | string,
      buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BN | string,
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      amount: number | BN | string,
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  purchase: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  checkDistributions: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface DCAOperatorRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addDCAOperator: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceDCAOperator: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDCAOperator(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ERC721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721BurnableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721EnumerableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenOfOwnerByIndex(
    owner: string | BN,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  tokenByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface ERC721FullInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenOfOwnerByIndex(
    owner: string | BN,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface ERC721MintableInstance extends Truffle.ContractInstance {
  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeMint: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface Fake1InchRouterInstance extends Truffle.ContractInstance {
  getExpectedReturn(
    fromToken: string | BN,
    destToken: string | BN,
    amount: number | BN | string,
    parts: number | BN | string,
    flags: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN[]]>;

  swap: {
    (
      fromToken: string | BN,
      destToken: string | BN,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fromToken: string | BN,
      destToken: string | BN,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      fromToken: string | BN,
      destToken: string | BN,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fromToken: string | BN,
      destToken: string | BN,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FakeUniswapRouterInstance extends Truffle.ContractInstance {
  getAmountsOut(
    amountIn: number | BN | string,
    path: (string | BN)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface FreeERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface GLDTokenInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IAccessModuleInstance extends Truffle.ContractInstance {
  isOperationAllowed(
    operation: number | BN | string,
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ICErc20Instance extends Truffle.ContractInstance {
  transfer: {
    (
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      src: string | BN,
      dst: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  balanceOfUnderlying: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  exchangeRateStored(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  mint: {
    (
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mintAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemTokens: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemUnderlying: {
    (
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      redeemAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IDefiModuleInstance extends Truffle.ContractInstance {
  registeredTokens(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  poolBalance: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  availableInterest(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  withdrawInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  handleDeposit: {
    (
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      sender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      beneficiary: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePTKBalance: {
    (
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      ptkBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC165Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721Instance extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setApprovalForAll: {
    (
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC721EnumerableInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  tokenOfOwnerByIndex(
    owner: string | BN,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IERC721MetadataInstance extends Truffle.ContractInstance {
  approve: {
    (
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getApproved(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isApprovedForAll(
    owner: string | BN,
    operator: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  ownerOf(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  safeTransferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApprovalForAll: {
    (
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      _approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferFrom: {
    (
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenURI(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IERC721ReceiverInstance extends Truffle.ContractInstance {
  onERC721Received: {
    (
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string | BN,
      from: string | BN,
      tokenId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IPTokenInstance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distribute: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimDistributions: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fullBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateDistributedAmount(
    startDistribution: number | BN | string,
    nextDistribution: number | BN | string,
    initialBalance: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextDistribution(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributionTotalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributionBalanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IRAYNAVCalculatorInstance extends Truffle.ContractInstance {
  getTokenValue: {
    (
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      tokenId: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRAYPortfolioManagerInstance extends Truffle.ContractInstance {
  mint: {
    (
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      portfolioId: string | BN,
      beneficiary: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: string | BN,
      valueToWithdraw: number | BN | string,
      originalCaller: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IRAYStorageInstance extends Truffle.ContractInstance {
  getTokenKey(
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPrincipalAddress(
    portfolioId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getIsERC20(
    principalAddress: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getContractAddress(
    contractId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getTokenShares(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenCapital(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenAllowance(
    portfolioId: string | BN,
    rayTokenId: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface ITestnetCompoundDAIInstance extends Truffle.ContractInstance {
  allocateTo: {
    (
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IUniswapV2Router01Instance extends Truffle.ContractInstance {
  factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addLiquidity: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addLiquidityETH: {
    (
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;
    sendTransaction(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidity: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETH: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityWithPermit: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETHWithPermit: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactTokens: {
    (
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactETHForTokens: {
    (
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactETH: {
    (
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForETH: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapETHForExactTokens: {
    (
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  quote(
    amountA: number | BN | string,
    reserveA: number | BN | string,
    reserveB: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountOut(
    amountIn: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountIn(
    amountOut: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountsOut(
    amountIn: number | BN | string,
    path: (string | BN)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getAmountsIn(
    amountOut: number | BN | string,
    path: (string | BN)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;
}

export interface IUniswapV2Router02Instance extends Truffle.ContractInstance {
  factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addLiquidity: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addLiquidityETH: {
    (
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;
    sendTransaction(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      amountTokenDesired: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidity: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETH: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityWithPermit: {
    (
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string | BN,
      tokenB: string | BN,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETHWithPermit: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactTokens: {
    (
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactETHForTokens: {
    (
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapTokensForExactETH: {
    (
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      amountInMax: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForETH: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapETHForExactTokens: {
    (
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOut: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  quote(
    amountA: number | BN | string,
    reserveA: number | BN | string,
    reserveB: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountOut(
    amountIn: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountIn(
    amountOut: number | BN | string,
    reserveIn: number | BN | string,
    reserveOut: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAmountsOut(
    amountIn: number | BN | string,
    path: (string | BN)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getAmountsIn(
    amountOut: number | BN | string,
    path: (string | BN)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  removeLiquidityETHSupportingFeeOnTransferTokens: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens: {
    (
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      liquidity: number | BN | string,
      amountTokenMin: number | BN | string,
      amountETHMin: number | BN | string,
      to: string | BN,
      deadline: number | BN | string,
      approveMax: boolean,
      v: number | BN | string,
      r: string | BN,
      s: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokensSupportingFeeOnTransferTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactETHForTokensSupportingFeeOnTransferTokens: {
    (
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForETHSupportingFeeOnTransferTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: (string | BN)[],
      to: string | BN,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MinterRoleInstance extends Truffle.ContractInstance {
  isMinter(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addMinter: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceMinter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface ModuleInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface PausableInstance extends Truffle.ContractInstance {
  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PauserRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPauser(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addPauser: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renouncePauser: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface PoolInstance extends Truffle.ContractInstance {
  abiOf(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  description(txDetails?: Truffle.TransactionDetails): Promise<string>;

  founder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  is_constant(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setMetadata: {
    (
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  set: {
    (
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _module: string | BN,
      _constant: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  remove: {
    (_name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contains(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  size(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isConstant(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  get(_name: string, txDetails?: Truffle.TransactionDetails): Promise<string>;

  getName(
    _module: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  first(txDetails?: Truffle.TransactionDetails): Promise<string>;

  next(
    _current: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface TokenModuleInstance extends Truffle.ContractInstance {
  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface VotesModuleInstance extends Truffle.ContractInstance {
  getModuleAddress(
    module: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPool: {
    (_pool: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _pool: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface WhitelistAdminRoleInstance extends Truffle.ContractInstance {
  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface WhitelistedRoleInstance extends Truffle.ContractInstance {
  addWhitelistAdmin: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelistAdmin(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceWhitelistAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialize: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isWhitelisted(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeWhitelisted: {
    (account: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceWhitelisted: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}
